// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id                Int               @id @default(autoincrement())
  nombre            String
  email             String            @unique
  password          String
  estado            String            @default("activo") // activo o inactivo
  fechaCreacion     DateTime          @default(now())
  ultimaActividad   DateTime?
  roles             Rol[]             @relation("UsuarioRoles")
  acciones          Auditoria[]
  esSuperUsuario    Boolean           @default(false)
  
  // Nuevas relaciones para proyectos
  proyectosAsignados AsignacionProyecto[]
  tareasAsignadas    AsignacionTarea[]
  documentosCargados DocumentoProyecto[]
  notasProyecto      NotaProyecto[]
}

model Rol {
  id          Int       @id @default(autoincrement())
  nombre      String    @unique
  descripcion String?
  usuarios    Usuario[] @relation("UsuarioRoles")
  permisos    Permiso[] @relation("RolPermisos")
}

model Permiso {
  id          Int     @id @default(autoincrement())
  nombre      String  @unique
  descripcion String?
  modulo      String  // a qué módulo pertenece
  accion      String  // qué acción permite (crear, leer, actualizar, eliminar)
  roles       Rol[]   @relation("RolPermisos")
}

model Auditoria {
  id           Int      @id @default(autoincrement())
  usuarioId    Int
  usuario      Usuario  @relation(fields: [usuarioId], references: [id])
  accion       String   // inserción, actualización, borrado
  entidad      String   // qué tabla fue afectada
  entidadId    String   // id de la entidad afectada
  detalles     Json?    // detalles del cambio en formato JSON
  fechaHora    DateTime @default(now())
}

// Modelo para proyectos de construcción
model Proyecto {
  id                Int               @id @default(autoincrement())
  codigo            String            @unique
  nombre            String
  descripcion       String?
  ubicacion         String
  fechaInicio       DateTime?
  fechaFinEstimada  DateTime?
  fechaFinReal      DateTime?
  presupuestoTotal  Decimal           @db.Decimal(12, 2)
  estado            String            @default("planificacion") // planificacion, ejecucion, pausado, finalizado, cancelado
  prioridad         String            @default("media")         // baja, media, alta
  fechaCreacion     DateTime          @default(now())
  fechaActualizacion DateTime         @updatedAt
  etapas            EtapaProyecto[]
  asignaciones      AsignacionProyecto[]
  documentos        DocumentoProyecto[]
  notas             NotaProyecto[]
}

// Modelo para etapas de proyectos
model EtapaProyecto {
  id                Int               @id @default(autoincrement())
  nombre            String
  descripcion       String?
  proyectoId        Int
  proyecto          Proyecto          @relation(fields: [proyectoId], references: [id])
  orden             Int
  fechaInicio       DateTime?
  fechaFinEstimada  DateTime?
  fechaFinReal      DateTime?
  presupuesto       Decimal           @db.Decimal(12, 2)
  estado            String            @default("pendiente") // pendiente, en_progreso, completada
  avance            Int               @default(0) // Porcentaje de avance (0-100)
  fechaCreacion     DateTime          @default(now())
  fechaActualizacion DateTime         @updatedAt
  tareas            TareaProyecto[]
}

// Modelo para tareas de etapas
model TareaProyecto {
  id                Int               @id @default(autoincrement())
  nombre            String
  descripcion       String?
  etapaId           Int
  etapa             EtapaProyecto     @relation(fields: [etapaId], references: [id])
  orden             Int
  fechaInicio       DateTime?
  fechaFinEstimada  DateTime?
  fechaFinReal      DateTime?
  estado            String            @default("pendiente") // pendiente, en_progreso, completada
  prioridad         String            @default("media")     // baja, media, alta
  asignado          AsignacionTarea[]
  fechaCreacion     DateTime          @default(now())
  fechaActualizacion DateTime         @updatedAt
  materialesAsignados AsignacionMaterial[]
}

// Modelo para asignación de empleados a proyectos
model AsignacionProyecto {
  id                Int               @id @default(autoincrement())
  proyectoId        Int
  proyecto          Proyecto          @relation(fields: [proyectoId], references: [id])
  usuarioId         Int
  usuario           Usuario           @relation(fields: [usuarioId], references: [id])
  rol               String            // director, arquitecto, ingeniero, capataz, obrero, etc.
  fechaAsignacion   DateTime          @default(now())
  fechaDesasignacion DateTime?
  activo            Boolean           @default(true)

  @@unique([proyectoId, usuarioId, rol])
}

// Modelo para asignación de empleados a tareas específicas
model AsignacionTarea {
  id                Int               @id @default(autoincrement())
  tareaId           Int
  tarea             TareaProyecto     @relation(fields: [tareaId], references: [id])
  usuarioId         Int
  usuario           Usuario           @relation(fields: [usuarioId], references: [id])
  fechaAsignacion   DateTime          @default(now())
  fechaDesasignacion DateTime?
  activo            Boolean           @default(true)

  @@unique([tareaId, usuarioId])
}

// Modelo para documentos de proyecto
model DocumentoProyecto {
  id                Int               @id @default(autoincrement())
  proyectoId        Int
  proyecto          Proyecto          @relation(fields: [proyectoId], references: [id])
  nombre            String
  descripcion       String?
  tipo              String            // plano, contrato, permiso, informe, etc.
  urlArchivo        String
  fechaCarga        DateTime          @default(now())
  usuarioCargaId    Int
  usuarioCarga      Usuario           @relation(fields: [usuarioCargaId], references: [id])
}

// Modelo para notas/comentarios de proyecto
model NotaProyecto {
  id                Int               @id @default(autoincrement())
  proyectoId        Int
  proyecto          Proyecto          @relation(fields: [proyectoId], references: [id])
  usuarioId         Int
  usuario           Usuario           @relation(fields: [usuarioId], references: [id])
  contenido         String
  fechaCreacion     DateTime          @default(now())
  esPrivada         Boolean           @default(false)
}

// Modelo para materiales
model Material {
  id                Int               @id @default(autoincrement())
  codigo            String            @unique
  nombre            String
  descripcion       String?
  categoria         String
  unidadMedida      String
  precioReferencia  Decimal           @db.Decimal(12, 2)
  stockMinimo       Decimal?          @db.Decimal(12, 2)
  fechaCreacion     DateTime          @default(now())
  fechaActualizacion DateTime         @updatedAt
  asignaciones      AsignacionMaterial[]
  proveedores      MaterialProveedor[]
}

// Modelo para proveedores
model Proveedor {
  id                Int               @id @default(autoincrement())
  codigo            String            @unique
  nombre            String
  nombreComercial   String?
  tipoDocumento     String            // RFC, NIF, etc.
  numeroDocumento   String
  direccion         String?
  ciudad            String?
  codigoPostal      String?
  pais              String?
  telefono          String?
  email             String?
  sitioWeb          String?
  categorias        String[]          // Array de categorías
  condicionesPago   String?           // 30 días, 60 días, etc.
  descuento         Decimal?          @db.Decimal(5, 2) // Porcentaje
  observaciones     String?
  estado            String            @default("activo")
  fechaCreacion     DateTime          @default(now())
  fechaActualizacion DateTime         @updatedAt
  // Relaciones
  contactos         ContactoProveedor[]
  materiales       MaterialProveedor[]
}

// Contactos de proveedor
model ContactoProveedor {
  id                Int               @id @default(autoincrement())
  proveedorId       Int
  proveedor         Proveedor         @relation(fields: [proveedorId], references: [id])
  nombre            String
  cargo             String?
  telefono          String?
  email             String?
  esPrincipal       Boolean           @default(false)
  observaciones     String?
}
// Añadir al final del archivo prisma/schema.prisma

// Modelo para la asignación de materiales a tareas
model AsignacionMaterial {
  id                Int               @id @default(autoincrement())
  materialId        Int
  material          Material          @relation(fields: [materialId], references: [id])
  tareaId           Int
  tarea             TareaProyecto     @relation(fields: [tareaId], references: [id])
  cantidad          Decimal           @db.Decimal(12, 2)
  unidadMedida      String            // Se guarda para mantener coherencia histórica
  estado            String            @default("pendiente") // pendiente, solicitado, comprado, entregado
  observaciones     String?
  fechaAsignacion   DateTime          @default(now())
  fechaActualizacion DateTime         @updatedAt
  
  @@unique([materialId, tareaId])
}
// Modelo para relacionar materiales y proveedores con precios
model MaterialProveedor {
  id                Int               @id @default(autoincrement())
  materialId        Int
  material          Material          @relation(fields: [materialId], references: [id])
  proveedorId       Int
  proveedor         Proveedor         @relation(fields: [proveedorId], references: [id])
  precio            Decimal           @db.Decimal(12, 2)
  unidadMedida      String            // Se guarda para mantener coherencia histórica
  tiempoEntrega     String?           // Tiempo estimado de entrega (ej: "2-3 días")
  cantidadMinima    Decimal?          @db.Decimal(12, 2) // Cantidad mínima de pedido
  observaciones     String?
  esProveedorPrincipal Boolean        @default(false)
  fechaActualizacion DateTime         @updatedAt
  fechaCreacion     DateTime          @default(now())
  
  @@unique([materialId, proveedorId])
}